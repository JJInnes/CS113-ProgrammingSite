Operators
Looking at our variable declaration from before we can see our first example of an operator
var myNumberVariable = 10;
Here “=” is the assignment operator, which tells the computer to try and set the variable on the left’s value to whatever is on the right.
There are two other important types of operator in javascript: arithmetic and logical operators.
Arithmetic operators include add, subtract, multiply, divide and modulo, increment and decrement. These are “+”, “-“, “*”, “/”, “%”, "++", "--" respectively. These are used to complete mathematical operations on numbers. 
(Note: modulo is used to get the remainder of a division, so 15%10 is equal to 5, 30%20 is equal to 10, increment increases a variables value by 1, and decrement does the opposite of increment)
So, here’s a few things you can do with the variable from before, assuming myNumberVariable is already defined:

myNumberVariable = 100 / 50;
This sets the value of myNumberVariable to 2

var a = 3;
var b = 5;
myNumberVariable = a * b;
This sets myNumberVariable to 15

myNumberVariable = myNumberVariable + 1
This sets myNumberVariable to store its own value + 1, so 11
Many programming languages have operators such as “+=”, that can be used to shorten the above snippet of pseudocode to:
myNumberVariable += 1
This still sets myNumberVariable to store its current value + 1

Logical operators are all about Boolean values and include:
1.	“EQUAL TO” (True if both sides are the same, else false)
2.	“NOT EQUAL TO” (False if both sides are true, else true)
3.	“GREATER THAN” (True if left is greater than right, else false)
4.	“LESS THAN”,  (True if left is lesser than right, else false)
5.	“GREATER THAN OR EQUAL TO” (True if left is greater than or the same as right, else flase)
6.	“LESS THAN OR EQUAL TO” (True if left is lesser than or the same as right, else flase)
7.	“AND” (True if both sides true, else false)
8.	“OR” (True if either side are true, only false if both sides are false)
9.	“NOT” (Inverts a Boolean expression (true -> false or false -> true))
Once again, the symbols used to represent these vary (especially for AND and OR) – for the sake of simplicity, here I will use: 
1.	“==”, 
2.	“!=”,
3.	“>”, 
4.	“<”, 
5.	“>=”, 
6.	“<=”, 
7.	“&&”, 
8.	“||”, 
9.	“!”
Logical operators always create statements that evaluate to “true” or “false”, Boolean values, so lets create a variable that can hold the result of a statement:
var myBoolVariable;
Here’s some example statements including logical operators:

var a = 5;
var b = 5;
myBoolVariable = a==b;
Sets myBoolVariable to true

myBoolVariable = 7 > 10;
Sets myBoolVariable to false

myBoolVariable = ((1 < 2) && (3 > 2));
Sets myBoolVariable to true, note that brackets can be used in any mathematical or logical statement in most languages

myBoolVariable = !((1 < 2) || (3 > 4));
Sets myBoolVariable to false
